import os
import subprocess
import traceback
from time import sleep

from .database import DatabaseManagment
from .errors import Error
from .ToStdOut import ToStdout

from threading import Thread


error = Error
write = ToStdout.write

class exploitDetails:
    def __init__(self):
        os.system("clear")
        write("[*] Loading exploit details")
        with open(DatabaseManagment.get()["EXPLOIT"]) as file:
            data = file.read().split("#!#!#!")
            file.close()
        write(f'exploit: {DatabaseManagment.get()["EXPLOIT"]}\nDetails')
        data = data[1].lstrip('"').rstrip('"')
        write(f"{data}")
        pass



class ExploitHandler:
    def __init__(self, *args):
        types = ["py", "sh"]
        funs = [self.python, self.sh]
        self.database = DatabaseManagment.get()
        write("[*] Loaded database.")
        self.term = DatabaseManagment.findTerm()
        write(f"[*] Loaded terminal program: {self.term}")
        Type = self.database["EXPLOIT"].split(".")[len(self.database["EXPLOIT"].split('.')) - 1]
        write(f"[*] Found exploit type {Type}")
        integration = DatabaseManagment.checkIntegration()
        if integration:
            if DatabaseManagment.get()["STAGED"]:
                write("[*] SuperSploit integrated exploit detected.")
                if DatabaseManagment.socketedExploit():
                    write("[*] Remote exploit detected")
                    re = Thread(target=self.remoteExploit)
                    re.start()
                    n = 20
                    while n != 0:
                        write("\033[H\033[J")
                        write(f"Waiting {n} seconds")
                        sleep(1)
                        n -= 1
        if Type in types:
            funs[types.index(Type)]()


    def python(self):
        try:
            write("Starting Exploit")
            subprocess.run(["python3", self.database["EXPLOIT"]])
            write("Exploit completed")
        except Exception:
            error(f"[!] {traceback.format_exc()}")

    def remoteExploit(self):
        try:
            subprocess.run([self.term, "-e", "python3", '"exploits/multi/handler.py"'])
        except Exception as e:
            write(e)

    def sh(self):
        try:
            write("Starting Exploit")
            subprocess.run(["bash", self.database["EXPLOIT"]])
            write("Exploit completed")
        except Exception:
            error(traceback.format_exc())
