# integrated = True
#!#!#!
# This uses adb, fastboot and heimdall
# to attempt to install a custom recovery
# and root the device by flashing Magisk
# or the superSu zip from cloudflair
# REQUIRED OPTIONS
#!#!#!

import json
import os
from time import sleep
from subprocess import run
from ppadb.client import Client as AdbClient
from prompt_toolkit import prompt as input
from pwnlib.adb import fastboot

installation = f'{os.getenv("HOME")}/.SuperSploit'
path_to_database = f"{installation}/.data/data.json"
with open(f"{installation}/.data/Aliases.json") as file:
    aliases = json.load(file)
    file.close()

# Default is "127.0.0.1" and 5037
client = AdbClient(host="127.0.0.1", port=5037)
devices = client.devices()

"""
if len(devices) < 1:
    print("no devices connected")
    exit()
"""

flash_tools = ("fastboot", "heimdall")
root_tools = os.listdir(f"{installation}/.data/.adb/root/SuperUserPrograms")

class AndroidRoot:
    def __init__(self):
        self.flash_methods = [self.fastboot_flash_method, self.heimdall_flash_method]
        self.vendor = None
        self.model = None
        self.flashTool = None
        self.recovery = None
        self.get_device_vendor()
        self.reboot_bootloader()
        self.core()

    def get_device_vendor(self) -> bool:
        vendors = ["Samsung", "google"]
        print("\033[H\033[J")
        for x in vendors:
            print(f"{vendors.index(x)}: {x}")
        try:
            self.vendor = vendors[int(input("Please select the vendor: "))]
        except Exception as e:
            print(f"[!] {e}")
            print("[!] Improper format please select the index of the vendor.")
            return False
        if self.vendor == vendors[0]:
            self.flashTool = flash_tools[1]
        else:
            self.flashTool = flash_tools[0]
        print(f"[*] Using {self.flashTool} as flash tool.\n[*] Using {self.vendor} as vendor.")
        return True

    def reboot_bootloader(self) -> bool:
        print("\033[H\033[J")
        recoverys = os.listdir(f"{installation}/.data/.adb/root/recoverys")
        for i in recoverys:
            print(f"{recoverys.index(i)}: {i}")
        self.recovery = recoverys[int(input("Please enter the index of the recovery you want to flash: "))]
        print("\033[H\033[J")
        if input(f"Please be sure you have selected the correct recovery for your device\nas flashing a incorrect one will brick the device\nchosen recovery {self.recovery}.\nEnter [y/n]: ").startswith("y"):
            run(["adb", "reboot-bootloader"])
            return False

    def heimdall_flash_method(self):
        n = 0
        while n < 15:
            print(f"Waiting {str(15 - n)} seconds")
            sleep(1)
            print("\033[H\033[J")
            n += 1
        flashToolCheck = run(["heimdall", "detect"], capture_output=True)
        if "Device detected" in flashToolCheck.stdout.decode():
            flash_cmd = f"heimdall flash --RECOVERY {installation}/.data/.adb/root/recoverys/{self.recovery} --no-reboot"
            try:
                run(flash_cmd.split(" "))
                input("Please reboot the device once device is powered on fully press enter: ")
                run(["clear"])
                run(["adb", "reboot", "recovery"])
                self.root()
            except RuntimeError as e:
                print(e)
                return

    def fastboot_flash_method(self):
        data = int(input("0.) boot recovery\n1.) flash recovery\n"))
        if data == 0:
            run(["fastboot", "boot", f"{installation}/.data/.adb/root/recoverys/{self.recovery}"])
        elif data == 1:
            run(["fastboot", "flash", "recovery", f"{installation}/.data/.adb/root/recoverys/{self.recovery}"])
        input("Please reboot the device and then press enter: ")
        self.root()

    def root(self):
        for x in root_tools:
            print(f"{root_tools.index(x)}: {x}")
        root = root_tools[int(input("Please enter the index of the root package: "))]
        n = 10
        while n > 0:
            run(["clear"])
            print(f"Waiting {n} seconds to send payload via sideload")
            sleep(1)
            n -= 1
        if n == 0:
            run(["adb", "sideload", f"{installation}/.data/.adb/root/SuperUserPrograms/{root}"])
        print("[*] Root completed reboot system and open the magisk or superuser app")
        return True

    def core(self):
        self.flash_methods[flash_tools.index(self.flashTool)]()


AndroidRoot()