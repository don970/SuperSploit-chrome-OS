import json
import os
import threading
from socket import socket, AF_INET, SOCK_STREAM
from _socket import SO_REUSEADDR, SOL_SOCKET

# integrated = True
#!#!#!
# This is a payload handler this is capable of catching many types of reverse connections
#
# REQUIRED OPTIONS
# L_HOST: local HOST
# L_PORT: local port
#!#!#!

clients = []
ids=[]


def intergrate():
    installation = f'{os.getenv("HOME")}/.SuperSploit'
    with open(f"{installation}/.data/data.json") as file:
        variableDict = json.load(file)
        file.close()
    return variableDict


class network:

    def __init__(self):
        self.socket = socket(AF_INET, SOCK_STREAM)
        self.socket.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
        self.bind_socket()
        self.listen()
        self.accept()

    def bind_socket(self):
        try:
            di = intergrate()
            self.socket.bind((di["L_HOST"], int(di["L_PORT"])))
            return True
        except OSError as e:
            print(e)
            return False

    def listen(self):
        self.socket.listen()
        print("Listen for connections")
        pass

    def accept(self):
        def t(self):
            while True:
                client, id = self.socket.accept()
                clients.append(client)
                ids.append(id)
        a = threading.Thread(target=t, args=(self, ))
        a.start()
        return True

network()